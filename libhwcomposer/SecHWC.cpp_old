/*
 * Copyright (C) 2010 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <hardware/hardware.h>

#include <fcntl.h>
#include <errno.h>

#include <cutils/log.h>
#include <cutils/atomic.h>

#include <hardware/hwcomposer.h>

#include <EGL/egl.h>

#include "s3c_g2d.h"
#include "../libgralloc/gralloc_priv.h"

/*****************************************************************************/
#define NUM_OF_WIN          (1)
#define NUM_OF_WIN_BUF      (3)

struct sec_rect {
    uint32_t x;
    uint32_t y;
    uint32_t w;
    uint32_t h;
};

struct hwc_win_info_t {
    int        fd;
    int        size;
    sec_rect   rect_info;
    uint32_t   addr[NUM_OF_WIN_BUF];
    int        buf_index;
    int        power_state;
    int        blending;
    int        layer_index;
    uint32_t   layer_prev_buf;
    int        set_win_flag;
    int        status;
    int        vsync;

    struct fb_fix_screeninfo fix_info;
    struct fb_var_screeninfo var_info;
    struct fb_var_screeninfo lcd_info;
};

struct hwc_context_t {
    hwc_composer_device_t device;
    /* our private state goes below here */
    struct hwc_win_info_t     win[NUM_OF_WIN];
    
    int mFD_G2D;

    struct fb_fix_screeninfo finfo;
    struct fb_var_screeninfo vinfo;
    struct fb_var_screeninfo lcd_info;
};

struct s3cfb_user_window {
    int x;
    int y;
};

/*
 * C U S T O M  I O C T L S
 *
*/

#define FBIO_WAITFORVSYNC       _IO  ('F', 32)
#define S3CFB_WIN_POSITION      _IOW ('F', 203, struct s3cfb_user_window)

static int hwc_device_open(const struct hw_module_t* module, const char* name,
        struct hw_device_t** device);

static struct hw_module_methods_t hwc_module_methods = {
    open: hwc_device_open
};

hwc_module_t HAL_MODULE_INFO_SYM = {
    common: {
        tag: HARDWARE_MODULE_TAG,
        version_major: 1,
        version_minor: 0,
        id: HWC_HARDWARE_MODULE_ID,
        name: "Samsung s5p6442 hwcomposer module",
        author: "Sebastien Dadier <s.dadier@gmail.com>",
        methods: &hwc_module_methods,
    }
};

/*****************************************************************************/
int window_open(struct hwc_win_info_t *win, int id)
{
    char name[64];

    char const * const device_template = "/dev/graphics/fb%u";
    /* window & FB maping
       fb0 -> win-id : 2
       fb1 -> win-id : 3
       fb2 -> win-id : 4
       fb3 -> win-id : 0
       fb4 -> win_id : 1
       it is pre assumed that ...win0 or win1 is used here..
	 */
    switch (id) {
    case 0:
    case 1:
    case 2:
        break;
    default:
        ALOGE("%s::id(%d) is weird", __func__, id);
        goto error;
    }

    snprintf(name, 64, device_template, (id + 3)%5);

    win->fd = open(name, O_RDWR);
    if (win->fd < 0) {
		ALOGE("%s::Failed to open window device (%s) : %s",
				__func__, strerror(errno), device_template);
        goto error;
    }

    return 0;

error:
    if (0 <= win->fd)
        close(win->fd);
    win->fd = -1;

    return -1;
}

int window_close(struct hwc_win_info_t *win)
{
    int ret = 0;

    if (0 <= win->fd)
        ret = close(win->fd);
    win->fd = -1;

    return ret;
}

int window_get_global_lcd_info(struct fb_var_screeninfo *lcd_info)
{
    struct hwc_win_info_t win;
    int ret = 0;

    if (window_open(&win, 2)  < 0) {
        ALOGE("%s:: Failed to open window 2 device ", __func__);
        return -1;
    }

    if (ioctl(win.fd, FBIOGET_VSCREENINFO, lcd_info) < 0) {
        ALOGE("FBIOGET_VSCREENINFO failed : %s", strerror(errno));
        ret = -1;
        goto fun_err;
    }

    if (lcd_info->xres == 0) {
        lcd_info->xres = 240;
        lcd_info->xres_virtual = 240;
    }

    if (lcd_info->yres == 0) {
        lcd_info->yres = 400;
        lcd_info->yres_virtual = 800;
    }

    if (lcd_info->bits_per_pixel == 0)
        lcd_info->bits_per_pixel = 24;

fun_err:
    if (window_close(&win) < 0)
        ALOGE("%s::window2 close fail", __func__);   

    return ret;
}

int window_show(struct hwc_win_info_t *win)
{
    if(win->power_state == 0) {
        if (ioctl(win->fd, FBIOBLANK, FB_BLANK_UNBLANK) < 0) {
            ALOGE("%s: FBIOBLANK failed : (%d:%s)", __func__, win->fd,
                    strerror(errno));
            return -1;
        }
        win->power_state = 1;
    }
    return 0;
}

int window_hide(struct hwc_win_info_t *win)
{
    if (win->power_state == 1) {
        if (ioctl(win->fd, FBIOBLANK, FB_BLANK_POWERDOWN) < 0) {
            ALOGE("%s::FBIOBLANK failed : (%d:%s)",
             		__func__, win->fd, strerror(errno));
            return -1;
        }
        win->power_state = 0;
    }
    return 0;
}

int window_set_pos(struct hwc_win_info_t *win)
{
    struct s3cfb_user_window window;

    /* before changing the screen configuration...powerdown the window */
    if(window_hide(win) != 0)
        return -1;

    win->var_info.xres = win->rect_info.w;
    win->var_info.yres = win->rect_info.h;

    win->var_info.activate &= ~FB_ACTIVATE_MASK;
    win->var_info.activate |= FB_ACTIVATE_FORCE;

    if (ioctl(win->fd, FBIOPUT_VSCREENINFO, &(win->var_info)) < 0) {
        ALOGE("%s::FBIOPUT_VSCREENINFO(%d, %d) fail",
          		__func__, win->rect_info.w, win->rect_info.h);
        return -1;
    }

    window.x = win->rect_info.x;
    window.y = win->rect_info.y;

    if (ioctl(win->fd, S3CFB_WIN_POSITION, &window) < 0) {
        ALOGE("%s::S3CFB_WIN_POSITION(%d, %d) fail",
            	__func__, window.x, window.y);
      return -1;
    }

    return 0;
}

int window_get_info(struct hwc_win_info_t *win)
{
    if (ioctl(win->fd, FBIOGET_FSCREENINFO, &win->fix_info) < 0) {
        ALOGE("FBIOGET_FSCREENINFO failed : %s", strerror(errno));
        goto error;
    }

    return 0;

error:
    win->fix_info.smem_start = 0;

    return -1;
}

/*****************************************************************************/

static void dump_layer(hwc_layer_t const* l) {
    ALOGD("\ttype=%d, flags=%08x, handle=%p, tr=%02x, blend=%04x, {%d,%d,%d,%d}, {%d,%d,%d,%d}",
            l->compositionType, l->flags, l->handle, l->transform, l->blending,
            l->sourceCrop.left,
            l->sourceCrop.top,
            l->sourceCrop.right,
            l->sourceCrop.bottom,
            l->displayFrame.left,
            l->displayFrame.top,
            l->displayFrame.right,
            l->displayFrame.bottom);
}

static int hwc_prepare(hwc_composer_device_t *dev, hwc_layer_list_t* list) {
    if (list && (list->flags & HWC_GEOMETRY_CHANGED)) {
        for (size_t i=0 ; i<list->numHwLayers ; i++) {
            //dump_layer(&list->hwLayers[i]);
            list->hwLayers[i].compositionType = HWC_FRAMEBUFFER;
        }
    }
    return 0;
}

static int hwc_set(hwc_composer_device_t *dev,
        hwc_display_t dpy,
        hwc_surface_t sur,
        hwc_layer_list_t* list)
{
    //for (size_t i=0 ; i<list->numHwLayers ; i++) {
    //    dump_layer(&list->hwLayers[i]);
    //}

    if (dpy == NULL && sur == NULL && list == NULL) {
        return 0;
    }    
    
    EGLBoolean sucess = eglSwapBuffers((EGLDisplay)dpy, (EGLSurface)sur);
    if (!sucess) {
        return HWC_EGL_ERROR;
    }
    return 0;
}

static int hwc_device_close(struct hw_device_t *dev)
{
    struct hwc_context_t* ctx = (struct hwc_context_t*)dev;
    int i, ret;
    
      ret = 0;
    
    if (ctx) {
        close(ctx->mFD_G2D);
        for (i = 0; i < NUM_OF_WIN; i++) {
            if (window_close(&ctx->win[i]) < 0) {
                ALOGE("%s::window_close() fail", __func__);
                ret = -1;
            }
        }	
        free(ctx);
    }
    return ret;
}

/*****************************************************************************/

static int hwc_device_open(const struct hw_module_t* module, const char* name,
        struct hw_device_t** device)
{
    int status = -EINVAL;
    struct hwc_win_info_t *win;
    
    if (!strcmp(name, HWC_HARDWARE_COMPOSER)) {

        ALOGD("++opening %s", name);

        struct hwc_context_t *dev;
        dev = (hwc_context_t*)malloc(sizeof(*dev));

        /* initialize our state here */
        memset(dev, 0, sizeof(*dev));

        /* initialize the procs */
        dev->device.common.tag = HARDWARE_DEVICE_TAG;
        dev->device.common.version = 0;
        dev->device.common.module = const_cast<hw_module_t*>(module);
        dev->device.common.close = hwc_device_close;

        dev->device.prepare = hwc_prepare;
        dev->device.set = hwc_set;	

	status = 0;
	
	dev->mFD_G2D = open("/dev/s3c-g2d", O_RDWR);
	if (dev->mFD_G2D <0) {
	    status = errno;
	    ALOGE("Error opening G2D errno=%d (%s)",
		status, strerror(status));
	    status = -status;
	    return status;
	}	

//	dev->mFD = open("/dev/graphics/fb0", O_RDWR, 0);

	/* open WIN0 & WIN1 here */
	for (int i = 0; i < NUM_OF_WIN; i++) {
	    if (window_open(&(dev->win[i]), i) < 0) {
		ALOGE("%s:: Failed to open window %d device ", __func__, i);
		status = -EINVAL;
		goto err;
	    }
	}

	/* get default window config */
	if (window_get_global_lcd_info(&dev->lcd_info) < 0) {
	    ALOGE("%s::window_get_global_lcd_info is failed : %s",
				    __func__, strerror(errno));
	    status = -EINVAL;
	    goto err;
	}
	
//	dev->lcd_info.yres_virtual = dev->lcd_info.yres * 2;
	
	/* initialize the window context */
	for (int i = 0; i < NUM_OF_WIN; i++) {
	    win = &dev->win[i];
	    memcpy(&win->lcd_info, &dev->lcd_info, sizeof(struct fb_var_screeninfo));
	    memcpy(&win->var_info, &dev->lcd_info, sizeof(struct fb_var_screeninfo));

	    win->rect_info.x = 0;
	    win->rect_info.y = 0;
	    win->rect_info.w = win->var_info.xres;
	    win->rect_info.h = win->var_info.yres;

	    if (window_set_pos(win) < 0) {
		ALOGE("%s::window_set_pos is failed : %s",
					    __func__, strerror(errno));
		status = -EINVAL;
		goto err;
	    }

	    if (window_get_info(win) < 0) {
		ALOGE("%s::window_get_info is failed : %s",
					    __func__, strerror(errno));
		status = -EINVAL;
		goto err;
	    }

	    win->size = win->fix_info.line_length * win->var_info.yres;

	    if (!win->fix_info.smem_start){
		ALOGE("%s:: win-%d failed to get the reserved memory", __func__, i);
		status = -EINVAL;
		goto err;
	    }

	    for (int j = 0; j < NUM_OF_WIN_BUF; j++) {
		win->addr[j] = win->fix_info.smem_start + (win->size * j);
		ALOGI("%s::win-%d add[%d] %x ", __func__, i, j, win->addr[j]);
	    }
	}

	if (status == 0) {
	    *device = &dev->device.common;
	}	
        
    }
    
    ALOGI("--open %s",name);
    
err:
    return status;

}
